name: CI for building image

on:
  push:
    branches: [main]

jobs:
  build-image:
    runs-on: ubuntu-latest
    environment: dev

    env:
      ENVIRONMENT: ${{ vars.PKR_DEPLOYMENT_ZONE }}
      PROJECT_ID: ${{ vars.PKR_PROJECT_ID }}
      DEPLOYMENT_ZONE: ${{ vars.PKR_DEPLOYMENT_ZONE }}
      VPC_NETWORK: ${{ vars.PKR_VPC_NETWORK }}
      SOURCE_IMAGE_FAMILY: ${{ vars.PKR_SOURCE_IMAGE_FAMILY }}
      IMAGE_FAMILY: ${{ vars.PKR_IMAGE_FAMILY }}
      SSH_USERNAME: ${{ vars.PKR_SSH_USERNAME }}
      MACHINE_TYPE: ${{ vars.PKR_MACHINE_TYPE }}
      GCP_SA_KEY : ${{ secrets.GCLOUD_CREDENTIALS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin' # GitHub doesn't support OpenJDK directly

      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo systemctl start postgresql.service
          sudo -u postgres psql -c "CREATE DATABASE cloud_native_app_db;"
          sudo -u postgres psql -c "CREATE USER ${{ secrets.DB_USERNAME }} WITH ENCRYPTED PASSWORD '${{ secrets.DB_PASSWORD }}';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE cloud_native_app_db TO ${{ secrets.DB_USERNAME }};"

      - name: Cache Maven packages #Caching before any mvn cmd, this strategy is about optimizing for future runs
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }} #new cache entry is created whenever there are changes to pom.xml, ensuring dependencies are up-to-date
          restore-keys: ${{ runner.os }}-m2

      - name: Build and test
        run: mvn clean install

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: latest

      - name: Init, Format and Validate
        run: packer/scripts/format-validate-packer.sh

      - name: Set up Google Cloud credentials
        run: |
          echo "$GCP_SA_KEY" > /tmp/gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(realpath /tmp/gcp-key.json)" >> $GITHUB_ENV

      - name: Build Custom Image with Packer
        timeout-minutes: 45
        run: |
          PACKER_LOG=1 packer build -machine-readable -color=false \
            -var "environment=${ENVIRONMENT}" \
            -var "project_id=${PROJECT_ID}" \
            -var "deployment_zone=${DEPLOYMENT_ZONE}" \
            -var "vpc_network=${VPC_NETWORK}" \
            -var "source_image_family=${SOURCE_IMAGE_FAMILY}" \
            -var "image_family=${IMAGE_FAMILY}" \
            -var "ssh_username=${SSH_USERNAME}" \
            -var "machine_type=${MACHINE_TYPE}" \
            -var "artifact_path=$(pwd)/target/CloudNativeApplication-0.0.1-SNAPSHOT.jar" \
            packer/templates/webapp_server.pkr.hcl