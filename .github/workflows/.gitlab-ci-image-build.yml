name: CI for building image

on:
  pull_request:
    branches: [main]

jobs:
  build-image:
    runs-on: ubuntu-latest
    environment: dev
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: cloud_native_app_db
        ports:
          - 5432:5432
        # Set health checks to wait until postgres is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      ENVIRONMENT: ${{ vars.PKR_DEPLOYMENT_ZONE }}
      PROJECT_ID: ${{ vars.PKR_PROJECT_ID }}
      DEPLOYMENT_ZONE: ${{ vars.PKR_DEPLOYMENT_ZONE }}
      VPC_NETWORK: ${{ vars.PKR_VPC_NETWORK }}
      SOURCE_IMAGE_FAMILY: ${{ vars.PKR_SOURCE_IMAGE_FAMILY }}
      IMAGE_FAMILY: ${{ vars.PKR_IMAGE_FAMILY }}
      SSH_USERNAME: ${{ vars.PKR_SSH_USERNAME }}
      MACHINE_TYPE: ${{ vars.PKR_MACHINE_TYPE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin' # GitHub doesn't support OpenJDK directly

      - name: Cache Maven packages #Caching before any mvn cmd, this strategy is about optimizing for future runs
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }} #new cache entry is created whenever there are changes to pom.xml, ensuring dependencies are up-to-date
          restore-keys: ${{ runner.os }}-m2

      - name: Build and test
        run: mvn clean install
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/cloud_native_app_db
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SPRING_JPA_HIBERNATE_DDL_AUTO: "update"

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: spring-boot-application
          path: target/*.jar

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: latest

      - name: Init, Format and Validate
        run: packer/scripts/format-validate-packer.sh

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: spring-boot-application
          path: artifact

      - name: Build Custom Image with Packer
        run: |
          packer build -machine-readable -color=false \
            -var "environment=${ENVIRONMENT}" \
            -var "project_id=${PROJECT_ID}" \
            -var "deployment_zone=${DEPLOYMENT_ZONE}" \
            -var "vpc_network=${VPC_NETWORK}" \
            -var "source_image_family=${SOURCE_IMAGE_FAMILY}" \
            -var "image_family=${IMAGE_FAMILY}" \
            -var "ssh_username=${SSH_USERNAME}" \
            -var "machine_type=${MACHINE_TYPE}" \
            -var "artifact_path=../artifact/*.jar" \
            packer/templates/webapp_server.pkr.hcl