name: CI for building image

#on:
#  push:
#    branches: [main]

on:
  pull_request:
    branches: [main]

jobs:
  build-image:
    runs-on: ubuntu-latest
    environment: dev

    env:
      ENVIRONMENT: ${{ vars.PKR_DEPLOYMENT_ZONE }}
      PROJECT_ID: ${{ vars.PKR_PROJECT_ID }}
      DEPLOYMENT_ZONE: ${{ vars.PKR_DEPLOYMENT_ZONE }}
      VPC_NETWORK: ${{ vars.PKR_VPC_NETWORK }}
      SOURCE_IMAGE_FAMILY: ${{ vars.PKR_SOURCE_IMAGE_FAMILY }}
      IMAGE_FAMILY: ${{ vars.PKR_IMAGE_FAMILY }}
      SSH_USERNAME: ${{ vars.PKR_SSH_USERNAME }}
      MACHINE_TYPE: ${{ vars.PKR_MACHINE_TYPE }}
      GCP_SA_KEY : ${{ secrets.GCLOUD_CREDENTIALS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin' # GitHub doesn't support OpenJDK directly

      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo systemctl start postgresql.service
          sudo -u postgres psql -c "CREATE DATABASE cloud_native_app_db;"
          sudo -u postgres psql -c "CREATE USER ${{ secrets.DB_USERNAME }} WITH ENCRYPTED PASSWORD '${{ secrets.DB_PASSWORD }}';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE cloud_native_app_db TO ${{ secrets.DB_USERNAME }};"

      - name: Cache Maven packages #Caching before any mvn cmd, this strategy is about optimizing for future runs
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }} #new cache entry is created whenever there are changes to pom.xml, ensuring dependencies are up-to-date
          restore-keys: ${{ runner.os }}-m2

      - name: Set up Google Cloud credentials
        run: |
          echo "$GCP_SA_KEY" > /tmp/gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(realpath /tmp/gcp-key.json)" >> $GITHUB_ENV

      - name: Build and test
        run: mvn clean install

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: latest

      - name: Init, Format and Validate
        run: packer/scripts/format-validate-packer.sh

      - name: Build Custom Image with Packer
        timeout-minutes: 45
        run: |
          PACKER_LOG=1 packer build -machine-readable -color=false \
            -var "environment=${ENVIRONMENT}" \
            -var "project_id=${PROJECT_ID}" \
            -var "deployment_zone=${DEPLOYMENT_ZONE}" \
            -var "vpc_network=${VPC_NETWORK}" \
            -var "source_image_family=${SOURCE_IMAGE_FAMILY}" \
            -var "image_family=${IMAGE_FAMILY}" \
            -var "ssh_username=${SSH_USERNAME}" \
            -var "machine_type=${MACHINE_TYPE}" \
            -var "artifact_path=$(pwd)/target/CloudNativeApplication-0.0.1-SNAPSHOT.jar" \
            packer/templates/webapp_server.pkr.hcl
          
  update-instance-group:
    needs: build-image
    runs-on: ubuntu-latest
    environment: dev
    env:
      ENVIRONMENT: ${{ vars.PKR_DEPLOYMENT_ZONE }}
      PROJECT_ID: ${{ vars.PKR_PROJECT_ID }}
      DEPLOYMENT_REGION: ${{ vars.GCLOUD_REGION }}
      DEPLOYMENT_ZONE: ${{ vars.GCLOUD_ZONE }}
      MACHINE_TYPE: ${{ vars.PKR_MACHINE_TYPE }}
      DB_HOST: ${{ secrets.GCLOUD_DB_HOST }}
      DB_NAME: ${{ secrets.GCLOUD_DB_NAME }}
      DB_USER: ${{ secrets.GCLOUD_DB_USER }}
      DB_PASS: ${{ secrets.GCLOUD_DB_PASS }}
      TERRAFORM_SUFFIX: ${{ secrets.GCLOUD_TERRAFORM_SUFFIX }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Authenticate GCP
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCLOUD_CREDENTIALS }}'

      - name: Set up Cloud SDK
        id: setup-cloud-sdk
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Get the latest image
        id: get-latest-image
        run: |
          LATEST_IMAGE_ID=$(gcloud compute images list \
              --project=${{ env.PROJECT_ID }} \
              --filter="family:custom-centos-stream-webapp" \
              --format="csv[no-heading](name,creationTimestamp)" \
              | sort -t, -k2,2r \
              | head -n 1 \
              | cut -d, -f1)
          echo "LATEST_IMAGE_ID=$LATEST_IMAGE_ID" 
          echo "LATEST_IMAGE_ID=$LATEST_IMAGE_ID" >> $GITHUB_ENV

      - name: Create a new instance template
        run: |
          NEW_SUFFIX=$(head /dev/urandom | tr -dc 'a-z0-9' | head -c 3)
          echo "NEW_SUFFIX=$NEW_SUFFIX" >> $GITHUB_ENV
          echo "NEW_SUFFIX=$NEW_SUFFIX"
          echo "${{ env.TERRAFORM_SUFFIX }}"
          SUBNET=$(gcloud compute networks subnets list --filter="name=webapp-${{ env.TERRAFORM_SUFFIX }}" --project=${{ env.PROJECT_ID }} --regions=${{ env.DEPLOYMENT_REGION }} --format="value(selfLink)")
          echo $SUBNET
          gcloud compute instance-templates create "webapp-instance-template-cicd-$NEW_SUFFIX" \
            --project=${{ env.PROJECT_ID }} \
            --machine-type=${{ env.MACHINE_TYPE }} \
            --network-interface="subnet=$SUBNET" \
            --metadata=db_host=${{ env.DB_HOST }},db_name=${{ env.DB_NAME }},db_password='${{ env.DB_PASS }}',db_user=${{ env.DB_USER }} \
            --metadata-from-file startup-script=packer/scripts/startup-script-instance-template.sh \
            --can-ip-forward \
            --maintenance-policy=MIGRATE \
            --provisioning-model=STANDARD \
            --service-account=vm-service-account-${{ env.TERRAFORM_SUFFIX }}@csye-6225-development.iam.gserviceaccount.com \
            --scopes=https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/pubsub,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write \
            --region=${{ env.DEPLOYMENT_REGION }} \
            --tags=webapp-firewall-app,webapp-firewall-http,webapp-firewall-https,webapp-firewall-ssh \
            --create-disk="auto-delete=yes,boot=yes,device-name=persistent-disk-0,image=projects/${{ env.PROJECT_ID }}/global/images/${{ env.LATEST_IMAGE_ID }},kms-key=projects/${{ env.PROJECT_ID }}/locations/${{ env.DEPLOYMENT_REGION }}/keyRings/cmek-kry-ring-${{ env.TERRAFORM_SUFFIX }}/cryptoKeys/vm-key-${{ env.TERRAFORM_SUFFIX }},mode=rw,size=20,type=pd-balanced" \
            --reservation-affinity=any

      - name: Update the instance group to use the new template
        run: |
          gcloud compute instance-groups managed set-instance-template webapp-instance-group-manager-${{ env.TERRAFORM_SUFFIX }} \
            --template="webapp-instance-template-cicd-${{ env.NEW_SUFFIX }}" \
            --region=${{ env.DEPLOYMENT_REGION }}

      - name: Start the rolling update
        run: |
          gcloud compute instance-groups managed rolling-action start-update webapp-instance-group-manager-${{ env.TERRAFORM_SUFFIX }} \
            --region=${{ env.DEPLOYMENT_REGION }} \
            --type=proactive \
            --version=template="webapp-instance-template-cicd-${{ env.NEW_SUFFIX }}" \
            --max-unavailable=1 \
            --max-surge=1 \

      - name: Wait for the update to complete
        run: |
          gcloud compute instance-groups managed wait-until --stable webapp-instance-group-manager-${{ env.TERRAFORM_SUFFIX }} \
            --region=${{ env.DEPLOYMENT_REGION }} \
            --timeout=900